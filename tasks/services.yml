---
- name: WorkingDirectory
  ansible.builtin.file:
    path: "{{ item.working_directory }}"
    state: directory
    mode: 02775
    owner: "{{ item.user | default(omit) }}"
    group: "{{ item.group | default(omit) }}"
  loop: "{{ systemd_services }}"
  when:
    - item.working_directory is defined
    - item.available is undefined or item.available
  tags:
    - systemd
    - workingdirectory

- name: Systemd service template
  ansible.builtin.template:
    src: systemd.service.j2
    dest: "/etc/systemd/system/{{ item.name }}.service"
    mode: 0644
  notify:
    - Systemd reload
    - Systemd service restart
  loop: "{{ systemd_services }}"
  when:
    item.available is undefined or
    item.available
  tags:
    - systemd
    - service
    - template

- name: Systemd service stat
  ansible.builtin.stat:
    path: "/etc/systemd/system/{{ item.name }}.service"
  loop: "{{ systemd_services }}"
  register: s
  when:
    item.available is undefined or
    item.available
  tags:
    - systemd
    - service
    - template
    - stat

- name: Systemd service environmentfile template
  ansible.builtin.template:
    src: systemd.environment.j2
    dest: "/etc/systemd/system/{{ item.name }}.environment"
    mode: 0600
  notify:
    - Systemd reload
    - Systemd service restart
  loop: "{{ systemd_services }}"
  when:
    - item.available is undefined or item.available
    - item.environmentfile is defined
  tags:
    - systemd
    - service
    - template

- name: Systemd service
  ansible.builtin.systemd:
    name: "{{ item.item.name }}"
    enabled: "{{ item.item.enabled | default(true) }}"
    state: "{{ item.item.state | default('started') }}"
    daemon_reload: true
  loop: "{{ s.results }}"
  when:
    - item.item.available is undefined or item.item.available
  tags:
    - systemd
    - service

- name: Systemd service restarter template
  ansible.builtin.template:
    src: systemd-restart.service.j2
    dest: "/etc/systemd/system/{{ item.name }}-restart.service"
    mode: 0644
  notify:
    - Systemd reload
    - Systemd restarter service restart
  loop: "{{ systemd_services }}"
  when:
    - item.available is undefined or item.available
    - item.restarter is defined
    - item.restarter
  tags:
    - systemd
    - service
    - template
    - restarter

- name: Systemd service restarter stat
  ansible.builtin.stat:
    path: "/etc/systemd/system/{{ item.name }}-restart.service"
  loop: "{{ systemd_services }}"
  register: r
  when:
    item.available is undefined or
    item.available
  tags:
    - systemd
    - service
    - template
    - stat

- name: Systemd restarter service
  ansible.builtin.systemd:
    name: "{{ item.item.name }}-restart"
    enabled: "{{ item.item.enabled | default(true) }}"
    state: "{{ item.item.state | default('started') }}"
    daemon_reload: true
  loop: "{{ r.results }}"
  when:
    - item.changed
    - item.stat.exists
    - item.item.available is undefined or item.item.available
  tags:
    - systemd
    - service
    - restarter

- name: Systemd path restarter template
  ansible.builtin.template:
    src: systemd-restart.path.j2
    dest: "/etc/systemd/system/{{ item.name }}-restart.path"
    mode: 0644
  notify:
    - Systemd reload
    - Systemd restarter path restart
  loop: "{{ systemd_services }}"
  when:
    - item.available is undefined or item.available
    - item.restarter is defined
    - item.restarter
  tags:
    - systemd
    - service
    - template
    - restarter

- name: Systemd path restarter stat
  ansible.builtin.stat:
    path: "/etc/systemd/system/{{ item.name }}-restart.path"
  loop: "{{ systemd_services }}"
  register: p
  when:
    item.available is undefined or
    item.available
  tags:
    - systemd
    - path
    - template
    - stat

- name: Systemd path
  ansible.builtin.systemd:
    name: "{{ item.item.name }}-restart.path"
    enabled: "{{ item.item.enabled | default(true) }}"
    state: "{{ item.item.state | default('started') }}"
    daemon_reload: true
  loop: "{{ p.results }}"
  when:
    - item.item.available is undefined or item.item.available
    - item.item.restarter is defined
    - item.item.restarter
  tags:
    - systemd
    - service
    - restarter

- name: Systemd service
  ansible.builtin.systemd:
    name: "{{ item.name }}"
    enabled: "{{ item.enabled }}"
    state: "{{ item.state }}"
    daemon_reload: true
  loop: "{{ systemd_services }}"
  when:
    - item.available is defined
    - not item.available
  tags:
    - systemd
    - service

- name: Clean service file
  ansible.builtin.file:
    path: "/etc/systemd/system/{{ item.name }}.service"
    state: absent
  notify: Systemd reload
  loop: "{{ systemd_services }}"
  when:
    - item.available is defined
    - not item.available
  tags:
    - systemd
    - service
    - deletion

- name: Clean environment file
  ansible.builtin.file:
    path: "/etc/systemd/system/{{ item.name }}.environnment"
    state: absent
  notify: Systemd reload
  loop: "{{ systemd_services }}"
  when:
    - item.available is defined
    - not item.available
  tags:
    - systemd
    - service
    - deletion

- name: Clean restart service file
  ansible.builtin.file:
    dest: "/etc/systemd/system/{{ item.name }}-restart.service"
    state: absent
  notify: Systemd reload
  loop: "{{ systemd_services }}"
  when:
    - item.available is defined
    - not item.available
    - item.restarter is defined
    - item.restarter
  tags:
    - systemd
    - service
    - deletion

- name: Clean restart path file
  ansible.builtin.file:
    dest: "/etc/systemd/system/{{ item.name }}-restart.path"
    state: absent
  notify: Systemd reload
  loop: "{{ systemd_services }}"
  when:
    - item.available is defined
    - not item.available
    - item.restarter is defined
    - item.restarter
  tags:
    - systemd
    - service
    - deletion
